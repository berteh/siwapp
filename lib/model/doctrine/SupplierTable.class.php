<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class SupplierTable extends Doctrine_Table
{
  /**
   * simplify a string for matching
   *
   * @return string
   * @author Enrique Martinez
   **/
  public static function slugify($text)
  {
    $conv_text = iconv("UTF-8", "US-ASCII//TRANSLIT", $text);
    if (trim($conv_text) == '') 
    {
        // cyrillic has no possible translit so we return the text
        return trim($text);
    }
    
    $conv_text = preg_replace('/\W+/', null, $conv_text);
    $conv_text = strtolower(trim($conv_text));
    
    return $conv_text;
  }

  /**
   * checks if there is a match in Supplier name
   * on the client table
   *
   * @return Client  -- the client matched
   * @author Enrique Martinez
   **/
  public function matchName($text)
  {
    $Supplier = $this->findOneBy('NameSlug', self::slugify($text));
      
    return $Supplier;
  }
  
  /**
   * Updates a Supplier object matching the object's data.
   *
   * @return void
   * @author Carlos Escribano <carlos@markhaus.com>
   **/
  public function updateSupplier($obj)
  {
    $Supplier = $this->getSupplierMatch($obj);
    if($Supplier->isNew() || 
       !in_array('Suppliers',PropertyTable::get('siwapp_modules',array())))
    {
      $Supplier->setDataFrom($obj);
    }
    $obj->setSupplier($Supplier);
    $Supplier->save();
  }
  
  /**
   * gets the Supplier that matches the invoice data
   * If no match returns a new Supplier object
   *
   * @param Invoice|RecurringInvoice -- the invoice or the recurring one.
   * @return Supplier  -- the Supplier matched
   * @author Enrique Martinez
   **/
  public function getSupplierMatch($invoice)
  {
    if($Supplier = $this->matchName($invoice->getSupplierName()))
    {
      return $Supplier;
    }

    return new Supplier();
  }
  
  /**
   * method for ajax request
   *
   * @return array
   * @author Enrique Martinez
   **/
  public function retrieveForSelect($q, $limit)
  {
    $items = $this->createQuery()
      ->where('name_slug LIKE ?', '%'.SupplierTable::slugify($q).'%')
      ->limit($limit)
      ->execute();
    
    $res = array();
    $i = 0;
    foreach ($items as $item)
    {
      $res[$i]['id'] = $item->getId();
      $res[$i]['supplier'] = $item->getName();
      $res[$i]['supplier_identification'] = $item->getIdentification();
      $res[$i]['supplier_email'] = $item->getEmail();
      $res[$i]['contact_person'] = $item->getContactPerson();
      $res[$i]['invoicing_address'] = $item->getInvoicingAddress();
      $res[$i]['shipping_address'] = $item->getShippingAddress();
      $res[$i]['supplier_phone'] = $item->getPhone();
      $res[$i]['supplier_fax'] = $item->getFax();
      $res[$i]['comments'] = $item->getComments();
      $res[$i]['expense_type'] = $item->getExpenseType()->getId();

      $i++;
    }
    
    return $res;
  }
  
  /**
   * method for ajax request
   * This is for the search form
   *
   * @return array
   * @author Enrique Martinez
   **/
  public function simpleRetrieveForSelect($q, $limit)
  {
    $items = Doctrine::getTable('Supplier')->createQuery()
      ->where('name_slug LIKE ?', '%'.SupplierTable::slugify($q).'%')
      ->limit($limit)
      ->execute();
    
    $res = array();
    foreach ($items as $item)
    {
      $res[$item->getId()] = $item->getName();
    }
    
    return $res;
  }
  
  public function getNonDraftInvoices($supplier_id,$date_range = array()) {

    $search = array_merge(array('supplier_id'=>$supplier_id),$date_range);
    $q = ExpenseQuery::create()->search($search)->andWhere('i.draft = 0');
    return $q->execute();
  }
  
  public static function getSupplierName($Supplier_id = null)
  {
    if ($Supplier_id)
    {
      $Supplier = Doctrine::getTable('Supplier')->findOneById($Supplier_id);
      if ($Supplier)
      {
        return $Supplier->getName();
      }
    }

    return '';
  }
  
  /**
   * Rebuild the name slug for each Supplier in database.
   */
  public static function rebuildSlugs()
  {
    $total = 0;
    $Suppliers = Doctrine::getTable('Supplier')->createQuery()->execute();
    foreach ($Suppliers as $Supplier)
    {
      $Supplier->setNameSlug(SupplierTable::slugify($Supplier->getName()));
      $Supplier->save();
      $total++;
    }
    return $total;
  }

}
